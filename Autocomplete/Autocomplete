import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

import java.util.Arrays;
import java.util.Comparator;

public class Autocomplete {
    private Term[] sorted; // instance variable for sorted array


    // Initializes the data structure from the given array of terms.
    public Autocomplete(Term[] terms) {

        if (terms == null)
            throw new IllegalArgumentException("argument array cannot be null");
        for (int i = 0; i < terms.length; i++) {
            if (terms[i] == null)
                throw new IllegalArgumentException(
                        "item at index" + i + "cannot be null");
        }
        sorted = new Term[terms.length];
        // create immutable copy
        for (int i = 0; i < terms.length; i++) {
            sorted[i] = terms[i];
        }

        Arrays.sort(sorted);
    }

    // Returns all terms that start with the given prefix,
    // in descending order of weight.
    public Term[] allMatches(String prefix) {
        if (prefix == null) throw new IllegalArgumentException(
                "String cannot be null");

        Comparator<Term> compare = Term.byPrefixOrder(prefix.length());
        Term key = new Term(prefix, 0);
        // copies over sorted array and creates immutable copy
        Term[] copy = new Term[sorted.length];
        for (int i = 0; i < sorted.length; i++) {
            copy[i] = sorted[i];
        }
        int firstIndex = BinarySearchDeluxe.firstIndexOf(copy, key, compare);
        int lastIndex = BinarySearchDeluxe.lastIndexOf(copy, key, compare);
        // corner case
        if (firstIndex == -1 || lastIndex == -1) {
            Term[] result = new Term[0];
            return result;
        }
        // ensures all solutions are within the array size
        int size = (lastIndex - firstIndex) + 1;
        Term[] result = new Term[size];
        // copies the solutions in the correct indexing
        for (int i = firstIndex; i <= lastIndex; i++) {
            result[i - firstIndex] = copy[i];
        }
        Comparator<Term> reverse = Term.byReverseWeightOrder();
        Arrays.sort(result, reverse);

        return result;
    }

    // Returns the number of terms that start with the given prefix.
    public int numberOfMatches(String prefix) {
        if (prefix == null)
            throw new IllegalArgumentException("String cannot be null");

        Comparator<Term> compare = Term.byPrefixOrder(prefix.length());
        Term key = new Term(prefix, 0);
        Term[] copy = new Term[sorted.length];
        for (int i = 0; i < copy.length; i++) {
            copy[i] = sorted[i];
        }
        int firstIndex = BinarySearchDeluxe.firstIndexOf(copy, key, compare);
        int lastIndex = BinarySearchDeluxe.lastIndexOf(copy, key, compare);
        if (firstIndex == -1 || lastIndex == -1) // corner case
            return 0;

        return (lastIndex - firstIndex) + 1;
    }

    // unit testing
    public static void main(String[] args) {
        String filename = args[0];
        In in = new In(filename);
        int n = in.readInt();
        Term[] terms = new Term[n];
        for (int i = 0; i < n; i++) {
            long weight = in.readLong();           // read the next weight
            in.readChar();                         // scan past the tab
            String query = in.readLine();          // read the next query
            terms[i] = new Term(query, weight);    // construct the term
        }

        // read in queries from standard input and print the top k matching terms
        int k = Integer.parseInt(args[1]);
        Autocomplete autocomplete = new Autocomplete(terms);
        while (StdIn.hasNextLine()) {
            String prefix = StdIn.readLine();
            Term[] results = autocomplete.allMatches(prefix);
            StdOut.print(results);
            StdOut.printf("%d matches\n", autocomplete.numberOfMatches(prefix));
            for (int i = 0; i < Math.min(k, results.length); i++)
                StdOut.println(results[i]);
        }

    }

}

