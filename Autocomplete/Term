import edu.princeton.cs.algs4.StdOut;

import java.util.Comparator;

public class Term implements Comparable<Term> {
    private String query; // string instance variable
    private long weight; // weight instance variable

    // Initializes a term with the given query string and weight.
    public Term(String query, long weight) {
        if (query == null || weight < 0) {
            throw new IllegalArgumentException(
                    "query cannot be null, weight cannot be negative");
        }
        this.query = query;
        this.weight = weight;

    }

    private static class ReverseWeightOrder implements Comparator<Term> {
        public int compare(Term a, Term b) {
            return Long.compare(b.weight, a.weight);
        }
    }

    // Compares the two terms in descending order by weight.
    public static Comparator<Term> byReverseWeightOrder() {
        return new ReverseWeightOrder();

    }

    private static class PrefixOrder implements Comparator<Term> {
        private int r; // order instance variable

        // method for prefix order
        public PrefixOrder(int r) {
            this.r = r;
        }

        public int compare(Term a, Term b) {
            for (int i = 0; i < r; i++) {

                if (a.query.length() == i && b.query.length() == i) {
                    return 0;
                }
                else if (i == a.query.length()) {
                    return -1;
                }
                else if (i == b.query.length())
                    return 1;
                else if (a.query.charAt(i) != b.query.charAt(i))
                    return Character.compare(a.query.charAt(i), b.query.charAt(i));

            }

            return 0;
        }
    }

    // Compares the two terms in lexicographic order,
    // but using only the first r characters of each query.
    public static Comparator<Term> byPrefixOrder(int r) {
        if (r < 0) {
            throw new IllegalArgumentException("argument cannot be negative");
        }
        return new PrefixOrder(r);

    }

    // Compares the two terms in lexicographic order by query.
    public int compareTo(Term that) {

        return query.compareTo(that.query);

    }

    // Returns a string representation of this term in the following format:
    // the weight, followed by a tab, followed by the query.
    public String toString() {
        return (weight + "\t" + query);

    }

    // unit testing (required)
    public static void main(String[] args) {
        Term a = new Term("dogca", 5);
        Term b = new Term("cat", 3);
        Term c = new Term("dogcatcher", 2);
        Term d = new Term("co", 1);

        // Should output 1 term a is greater than term b
        StdOut.println(a.compareTo(b));

        Comparator<Term> comparator1 = byPrefixOrder(3);

        // Should output 0 terms are equal
        StdOut.println(comparator1.compare(a, c));

        
        Comparator<Term> comparator2 = byReverseWeightOrder();

        // Should output -1 larger weight returns negative
        StdOut.println(comparator2.compare(a, d));

        // Should output 1 smaller weight returns positive
        StdOut.println(comparator2.compare(c, a));
    }
}
